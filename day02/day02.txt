

 id 선택자 => "#"
 class 선택자 => "."
 자식 선택자 => ">"
 자손 선택자 => " "

 ---------------------------------------------------------------------------

 속성 선택자

    속성(properties)?
        <div id="">
        <태그명 속성명 = 속성값 />

        [속성명] {
            ...CSS 문법 --> 해당 속성을 모두 갖고 있는 요소(태그)
        }

        [속성명 = '속성값'(따옴표 종류 상관 없음)] {
            ...CSS 문법 --> 해당 속성의 값이 '속성값'인 요소(태그)
        }

        ex)
            [href] {
                ...
            }

            [href = "https://www.naver.com"]{
                ...
            }

            ---------

            [type="text"]{
                ....
            }

            [type="checkbox"]{
                ....
            }

            ---------

        * 심화
            [속성명 = "속성값"] -> 값이 완벽히 일치
            [속성명 ~= "속성값"] -> 값이 속성값과 다른 띄어쓰기로 구성
            ex) 
            [name ~= "apple"]
            name="apple banana"

            [속성명 *= "속성값"] -> 속성값이 포함된
            name="bbapplecc"

            [속성명 $= "속성값"] => 속성값이 접미사로 끝나는 요소
            name="~apple"

            [속성명 ^= "속성값"] => 속성값이 접두사로 시작하는 요소
            name="apple~"
            
            [속성명 |= "속성값"] => 속성값이 완벽히 일치하거나, 접두사로 존재하면서 '-'으로 연결되어 있는 요소
            name = "apple"
            name = "apple - ~"

            key-point
            선택자에서 [](대괄호)가 보이면 속성 선택자

-------------------------------------------------------------------------------------

 가상 클래스 선택자
    - 클래스를 따로 추가할 필요 없이 요소 중에서 순서에 따라 원하는 특정 요소를 선택 및 스타일 지정

    ex) 
        <ul>
            <li></li>
            <li></li> ---> 두 번째 li 선택
            <li></li>
        </ul>

        ul > li:nth-child(2){
            ...CSS 문법
        }

        ul > li:nth-of-type(2){
            ...CSS 문법
        }

-------------------------------------------------------------------------------------

 가상 요소 선택자
    특정 요소 앞 뒤에 가상의 태그를 만들어냄

    선택자::before
    선택자::after

    ex) [name='sign-up']::after {
        content: " | "
        ..CSS문법
    }

     => 로그인 | 회원가입
--------------------------------------------------------------------------------------

 자주 사용하는 가상 선택자

 :root{}

 a 
 :link ----> 하이퍼링크가 연결되어 있을 때
 :visited --> 하이퍼 링크를 방문한 적이 있을 때

 :active --> 마우스(커서)가 해당 요소를 클릭했을 때
 :hover ---> 마우스(커서)가 해당 요소 위에 위치하고 있을 때

 input
 :focus ---> 입력 태그를 클릭해서 커서가 활성화 되어있을 때
 ::placeholder ----> placeholder의 css속성을 제어할 때

 --------------------------------------------------------------------------------------

    CSS 속성

        color의 표기법

        1. 색상 이름으로 표현
            red, white, black, blue...

        2. RGB 색상 값을 표현
                (0~255)
                    RED, GREEN, BLUE
                rgb(0~255, 0~255, 0~255)
                rgba(0~255, 0~255, 0~255, 0~1) --> 투명도
                    -- alpha

        3. 16진수 색상 값을 표현
            16진수 (00~FF)

                "#6자리"
                 r  g  b
                #00/00/00
                #ff/ff/ff --> #fff

                ex) #0000ff (파랑) 
                    #ff0000 (빨강)
                    #00ff00 (초록)
                    #ffffff (흰색)
                    #000000 (검정)

 --------------------------------------------------------------------------------------

    Text 관련 속성

    ** color : 텍스트 색상 

    letter-spacing : 문자 단위 사이 간격

    word-spacing : 단어 사이 간격

    ** text-align : 텍스트 정렬 (왼쪽, 가운데, 오른쪽)

    ** line-height : 텍스트와 텍스트 사이의 간격 (행간, 줄간)

    text-indent : 들여쓰기

    * text-decoration : 텍스트 여러 효과를 설정하거나 제거

    text-transform : 텍스트에 포함된 영문자를 대문자/소문자로 변환

    font-variant : 소문자를 더 작은 크기의 대문자로 변환

    * text-shadow : 텍스트 그림자 효과, 번짐 효과 등을 설정

    * white-space : 띄어쓰기, 들여쓰기, 줄바꿈을 어떻게 처리할지

    * text-overflow : 텍스트가 기준(부모요소)을 벗어날 경우 어떻게 처리할지

    ** font-size : 텍스트의 크기 

    ** font-weight : 텍스트의 굵기 

    ** font-family : 텍스트의 글꼴

    ....

 --------------------------------------------------------------------------------------
            